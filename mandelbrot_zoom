float e = 2.71828182845904523536028747135266249775724709369995;
float angle = 0;

float scale = 1;
float xPan = 300;
float yPan = 300;
boolean zoomIn = false;
boolean zoomOut = false;
boolean panUp = false;
boolean panDown = false;
boolean panLeft = false;
boolean panRight = false;
float panSpeed = 10;
float zoomSpeed = 2;



void setup() {
  size(600, 600);
  colorMode(HSB, 1);
}
void draw() {
  //translate(width/2,height/2);
  background(255);

  float ca = map(mouseX,0,width,-TWO_PI,TWO_PI);
  float cb = map(mouseY,0,width,-TWO_PI,TWO_PI);
  
  //float ca = cos(0.7885 * pow(e, angle));
  //float cb = sin(0.7885 * pow(e, angle));
  
   angle = map(mouseX,0,width,0,TWO_PI);
  

  // Establish a range of values on the complex plane
  // A different range will allow us to "zoom" in or out on the fractal
float w = map(mouseX,0,width,5,0.01);
float h = map(mouseY,0,height,5,0.01);

  // It all starts with the width, try higher or lower values
 
  // Start at negative half the width and height
  float xmin = -w/2;
  float ymin = -h/2;

  // Make sure we can write to the pixels[] array.
  // Only need to do this once since we don't do any other drawing.
  loadPixels();

  // Maximum number of iterations for each point on the complex plane
  int maxiterations = 100;

  // x goes from xmin to xmax
  float xmax = xmin + w;
  
  // y goes from ymin to ymax
  float ymax = ymin + h;

  // Calculate amount we increment x,y for each pixel
  float dx = (xmax - xmin) / (width);
  float dy = (ymax - ymin) / (height);

  // Start y
  float y = ymin;
  for (int j = 0; j < height; j++) {
    // Start x
    float x = xmin;
    for (int i = 0; i < width; i++) {

      // Now we test, as we iterate z = z^2 + cm does z tend towards infinity?
      float a = x;
      float b = y;
      int n = 0;

      //float ia = map(mouseX,0,width,0,TWO_PI);
      
      while (n < maxiterations) {
        float aa = a * a;
        float bb = b * b;
        
        if (aa + bb > 4.0) {
          break;  // Bail
        }
        float twoab = 2.0 * a * b;
        a = aa - bb + x;
        b = twoab + y;
        n++;
        
        //float xtmp = pow((aa + bb), cos(2 * atan2(b, a)) + 0.7885 * pow(e, ia * x));
        //b = pow((aa + bb), sin(2 * atan2(b, a)) + 0.7885 * pow(e, ia * x));
        //a = xtmp;
        
        //+ 0.7885 * pow(e, ia * x
        
        // Infinty in our finite world is simple, let's just consider it 16
 
      }
       
      // We color each pixel based on how long it takes to get to infinity
      // If we never got there, let's pick the color black
      if (n == maxiterations) {
        pixels[i+j*width] = color(0);
      } else {
        // Gosh, we could make fancy colors here if we wanted
        float hu = sqrt(float(n) / maxiterations);
        pixels[i+j*width] = color(hu, 255, 150);
      }
      x += dx;
    }
    y += dy;
  }
  updatePixels();
  println(frameRate);
  
}
